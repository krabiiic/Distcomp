// <auto-generated />
using System;
using LAB2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LAB2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250317095328_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LAB2.Models.Issue", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("writer_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("writer_id");

                    b.ToTable("tbl_issue", "public");
                });

            modelBuilder.Entity("LAB2.Models.IssueSticker", b =>
                {
                    b.Property<int>("issueId")
                        .HasColumnType("integer");

                    b.Property<int>("stickerId")
                        .HasColumnType("integer");

                    b.HasKey("issueId", "stickerId");

                    b.HasIndex("stickerId");

                    b.ToTable("tbl_issue_sticker", "public");
                });

            modelBuilder.Entity("LAB2.Models.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("issueId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("issueId");

                    b.ToTable("tbl_post", "public");
                });

            modelBuilder.Entity("LAB2.Models.Sticker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("id");

                    b.ToTable("tbl_sticker", "public");
                });

            modelBuilder.Entity("LAB2.Models.Writer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("id");

                    b.HasIndex("login")
                        .IsUnique();

                    b.ToTable("tbl_writer", "public");
                });

            modelBuilder.Entity("LAB2.Models.Issue", b =>
                {
                    b.HasOne("LAB2.Models.Writer", "writer")
                        .WithMany("issues")
                        .HasForeignKey("writer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("writer");
                });

            modelBuilder.Entity("LAB2.Models.IssueSticker", b =>
                {
                    b.HasOne("LAB2.Models.Issue", "issue")
                        .WithMany()
                        .HasForeignKey("issueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LAB2.Models.Sticker", "sticker")
                        .WithMany()
                        .HasForeignKey("stickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("issue");

                    b.Navigation("sticker");
                });

            modelBuilder.Entity("LAB2.Models.Post", b =>
                {
                    b.HasOne("LAB2.Models.Issue", "issue")
                        .WithMany("posts")
                        .HasForeignKey("issueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("issue");
                });

            modelBuilder.Entity("LAB2.Models.Issue", b =>
                {
                    b.Navigation("posts");
                });

            modelBuilder.Entity("LAB2.Models.Writer", b =>
                {
                    b.Navigation("issues");
                });
#pragma warning restore 612, 618
        }
    }
}
