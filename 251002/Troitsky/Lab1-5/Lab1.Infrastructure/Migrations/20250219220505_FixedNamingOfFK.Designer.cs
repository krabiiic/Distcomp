// <auto-generated />
using System;
using Lab1.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lab1.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250219220505_FixedNamingOfFK")]
    partial class FixedNamingOfFK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lab1.Infrastructure.Entities.CreatorEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("tbl_creator", (string)null);
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.IssueEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CreatorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("creator_id");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("tbl_issue", (string)null);
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.IssueStickerEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<decimal>("IssueId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("StickerId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("StickerId");

                    b.ToTable("IssueStickers");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.MessageEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("IssueId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("issue_id");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("tbl_message", (string)null);
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.StickerEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tbl_sticker", (string)null);
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.IssueEntity", b =>
                {
                    b.HasOne("Lab1.Infrastructure.Entities.CreatorEntity", "Creator")
                        .WithMany("Issues")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.IssueStickerEntity", b =>
                {
                    b.HasOne("Lab1.Infrastructure.Entities.IssueEntity", "Issue")
                        .WithMany("IssueStickers")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab1.Infrastructure.Entities.StickerEntity", "Sticker")
                        .WithMany("IssueStickers")
                        .HasForeignKey("StickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Sticker");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.MessageEntity", b =>
                {
                    b.HasOne("Lab1.Infrastructure.Entities.IssueEntity", "Issue")
                        .WithMany("Messages")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.CreatorEntity", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.IssueEntity", b =>
                {
                    b.Navigation("IssueStickers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.StickerEntity", b =>
                {
                    b.Navigation("IssueStickers");
                });
#pragma warning restore 612, 618
        }
    }
}
