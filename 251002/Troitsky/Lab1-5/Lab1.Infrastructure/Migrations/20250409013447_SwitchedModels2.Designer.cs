// <auto-generated />
using System;
using Lab1.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lab1.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250409013447_SwitchedModels2")]
    partial class SwitchedModels2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lab1.Infrastructure.Entities.NewsEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tbl_news");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_tbl_news_title");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tbl_news_user_id");

                    b.ToTable("tbl_news", (string)null);
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.NewsTagEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<decimal>("NewsId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("news_id");

                    b.Property<decimal>("TagId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("pk_news_tags");

                    b.HasIndex("NewsId")
                        .HasDatabaseName("ix_news_tags_news_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_news_tags_tag_id");

                    b.ToTable("news_tags", (string)null);
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.PostEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<decimal>("NewsId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("news_id");

                    b.HasKey("Id")
                        .HasName("pk_tbl_post");

                    b.HasIndex("NewsId")
                        .HasDatabaseName("ix_tbl_post_news_id");

                    b.ToTable("tbl_post", (string)null);
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.TagEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tbl_tag");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tbl_tag_name");

                    b.ToTable("tbl_tag", (string)null);
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_tbl_user");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_tbl_user_login");

                    b.ToTable("tbl_user", (string)null);
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.NewsEntity", b =>
                {
                    b.HasOne("Lab1.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_news_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.NewsTagEntity", b =>
                {
                    b.HasOne("Lab1.Infrastructure.Entities.NewsEntity", "News")
                        .WithMany("NewsTags")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_tags_news_news_id");

                    b.HasOne("Lab1.Infrastructure.Entities.TagEntity", "Tag")
                        .WithMany("NewsTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_tags_tags_tag_id");

                    b.Navigation("News");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.PostEntity", b =>
                {
                    b.HasOne("Lab1.Infrastructure.Entities.NewsEntity", "News")
                        .WithMany("Posts")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tbl_post_tbl_news_news_id");

                    b.Navigation("News");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.NewsEntity", b =>
                {
                    b.Navigation("NewsTags");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.TagEntity", b =>
                {
                    b.Navigation("NewsTags");
                });

            modelBuilder.Entity("Lab1.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Navigation("News");
                });
#pragma warning restore 612, 618
        }
    }
}
